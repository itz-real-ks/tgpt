#!/usr/bin/env bash

# === [ Define Colors ] === #
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# === [ Detect if running on Termux ] === #
if [ -n "$TERMUX_VERSION" ] || [[ "$PREFIX" == *com.termux* ]]; then
    is_termux=true
else
    is_termux=false
fi

# === [ Check if curl is installed ] === #
if ! command -v curl &> /dev/null; then
    echo -e "${RED}❌ curl is required but not installed.${NC}"
    if $is_termux; then
        echo -e "${YELLOW}📦 Run: pkg install curl${NC}"
    else
        echo -e "${YELLOW}📦 Install it using your system's package manager.${NC}"
    fi
    exit 1
fi

# === [ Detect OS and Architecture ] === #
detect_os_and_arch() {
    if $is_termux; then
        echo "linux"
    else
        case $(uname -s) in
            Darwin) echo "mac" ;;
            *) echo "linux" ;;
        esac
    fi

    case $(uname -m) in
        x86_64) echo "amd64" ;;
        i386|i686) echo "i386" ;;
        aarch64|arm64) echo "arm64" ;;
        arm|armv7l|armhf) echo "arm" ;;
        *)
            echo -e "${RED}❌ Unsupported architecture: $(uname -m)${NC}"
            exit 1
            ;;
    esac
}

# === [ Spinner for async tasks ] === #
spinner() {
    local pid=$1
    local delay=0.1
    local spin='/-\|'
    while ps -p "$pid" > /dev/null 2>&1; do
        for i in $(seq 0 3); do
            echo -ne "\r${spin:i:1}  "
            sleep "$delay"
        done
    done
    echo -ne "\r   \r"
}

# === [ Install tgpt binary ] === #
install_tgpt() {
    local os_name=$1
    local arch=$2
    local install_dir=$3

    local tgpt_bin_name="tgpt-${os_name}-${arch}"
    local tgpt_url="https://github.com/aandrew-me/tgpt/releases/latest/download/${tgpt_bin_name}"
    local tmp_file=$(mktemp)

    echo -e "${BLUE}⬇️  Downloading ${tgpt_bin_name} ...${NC}"
    curl -fSL --progress-bar "$tgpt_url" -o "$tmp_file" &
    spinner $!
    wait

    echo -e "${BLUE}📦 Installing to ${install_dir} ...${NC}"

    if $is_termux; then
        mv "$tmp_file" "$install_dir/tgpt" 2>/dev/null || {
            echo -e "${RED}🚫 Permission denied while moving file. Android might require root access.${NC}"
            rm -f "$tmp_file"
            exit 1
        }
        chmod +x "$install_dir/tgpt"
    else
        sudo mv "$tmp_file" "$install_dir/tgpt"
        sudo chmod +x "$install_dir/tgpt"
    fi

    echo -e "${GREEN}✅ tgpt installed at: $install_dir/tgpt${NC}"
}

# === [ Upgrade cert.pem if user agrees ] === #
upgrade_cert_pem() {
    if $is_termux; then
        read -p "🔐 Upgrade cert.pem with latest CA certs? (y/n): " confirm
        if [[ "${confirm,,}" == "y" ]]; then
            local cert_url="https://curl.se/ca/cacert.pem"
            local cert_path="/data/data/com.termux/files/usr/etc/tls/cert.pem"
            local tmp_cert="${cert_path}.tmp"

            echo -e "${BLUE}🌐 Downloading cert.pem ...${NC}"
            curl -fSL --progress-bar "$cert_url" -o "$tmp_cert" || {
                echo -e "${RED}❌ Failed to download cert.pem${NC}"
                return 1
            }

            mv "$tmp_cert" "$cert_path" || {
                echo -e "${RED}🚫 Failed to move cert.pem. Root may be required.${NC}"
                rm -f "$tmp_cert"
                return 1
            }

            echo -e "${GREEN}🔐 cert.pem upgraded successfully.${NC}"
        fi
    fi
}

# === [ Main Script ] === #
read os_name arch <<< $(detect_os_and_arch)

if $is_termux; then
    install_dir="/data/data/com.termux/files/usr/bin"
else
    install_dir="/usr/local/bin"
fi

# === [ Display Summary ] === #
echo -e "${BLUE}📦 tgpt Installer${NC}"
echo -e "${BLUE}🖥️  OS: $os_name${NC}"
echo -e "${BLUE}⚙️  Architecture: $arch${NC}"
echo -e "${BLUE}📁 Installation Path: $install_dir${NC}"
echo

read -p "➡️  Proceed with installation? (y/n): " confirm
if [[ "${confirm,,}" != "y" ]]; then
    echo -e "${RED}❌ Installation cancelled by user.${NC}"
    exit 0
fi

# === [ Do the actual installation ] === #
install_tgpt "$os_name" "$arch" "$install_dir"
upgrade_cert_pem

# === [ Path Check Warning ] === #
if ! command -v tgpt &> /dev/null; then
    echo -e "${YELLOW}⚠️  'tgpt' is not in your PATH.${NC}"
    echo -e "${YELLOW}👉 Add this to your shell config:${NC}"
    echo -e "${YELLOW}    export PATH=\"${install_dir}:\$PATH\"${NC}"
fi

echo -e "${GREEN}🎉 Installation complete. Run 'tgpt -h' for help.${NC}"
