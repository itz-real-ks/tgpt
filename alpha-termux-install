#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Parse arguments
for arg in "$@"; do
    case "$arg" in
        -h|--help)
            echo -e "${BLUE}tgpt Installer Script${NC}"
            echo -e "${BLUE}Usage:${NC} bash v2-install [install-dir] [options]"
            echo -e "  ${YELLOW}[install-dir]${NC}         Optional target install directory"
            echo -e "  ${YELLOW}-h, --help${NC}           Show this help message"
            exit 0
            ;;
        -*)
            echo -e "${YELLOW}‚ö†Ô∏è  Unknown option: ${arg}${NC}"
            ;;
    esac
done

# Detect Termux
if [ -n "$TERMUX_VERSION" ] || [[ "$PREFIX" == *com.termux* ]]; then
    is_termux=true
else
    is_termux=false
fi

# Determine install directory
if [ -n "$1" ] && [[ ! "$1" =~ ^- ]]; then
    install_dir="$1"
elif $is_termux; then
    install_dir="${PREFIX}/bin"
else
    install_dir="/usr/local/bin"
fi

# Check for curl
if ! command -v curl &> /dev/null; then
    echo -e "${RED}‚ùå curl is required but not installed.${NC}"
    if $is_termux; then
        echo -e "${YELLOW}üì¶ Run: pkg install curl${NC}"
    else
        echo -e "${YELLOW}üì¶ Install it using your system's package manager.${NC}"
    fi
    exit 1
fi

# Detect OS and arch
detect_os_and_arch() {
    local os
    if $is_termux; then
        os="linux"
    else
        case $(uname -s) in
            Darwin) os="mac" ;;
            *) os="linux" ;;
        esac
    fi

    local arch
    case $(uname -m) in
        x86_64) arch="amd64" ;;
        i386|i686) arch="i386" ;;
        aarch64|arm64) arch="arm64" ;;
        arm|armv7l|armhf) arch="arm" ;;
        *)
            echo -e "${RED}‚ùå Unsupported architecture: $(uname -m)${NC}"
            exit 1
            ;;
    esac

    echo "$os $arch"
}

# Spinner
spinner() {
    local pid=$1
    local delay=0.1
    local spin='/-\|'
    while ps -p "$pid" > /dev/null 2>&1; do
        for ((i=0; i<${#spin}; i++)); do
            echo -ne "\r${spin:$i:1} "
            sleep "$delay"
        done
    done
    echo -ne "\r   \r"
}

# Install tgpt
install_tgpt() {
    local os_name=$1
    local arch=$2
    local install_dir=$3

    local tgpt_bin_name="tgpt-${os_name}-${arch}"
    local tgpt_url="https://github.com/itz-real-ks/tgpt/releases/latest/download/${tgpt_bin_name}"
    local tmp_file

    if $is_termux; then
        tmp_file=$(mktemp "${PREFIX}/tmp/tgpt.XXXXXX")
    else
        tmp_file=$(mktemp)
    fi

    echo -e "${BLUE}‚¨áÔ∏è  Downloading ${tgpt_bin_name} ...${NC}"
    curl -fSL --progress-bar "$tgpt_url" -o "$tmp_file" & spinner $!; wait

    echo -e "${BLUE}üì¶ Installing to ${install_dir} ...${NC}"
    if $is_termux; then
        mv "$tmp_file" "$install_dir/tgpt" || {
            echo -e "${RED}üö´ Permission denied while moving file. Android might require root access.${NC}"
            rm -f "$tmp_file"
            exit 1
        }
        chmod +x "$install_dir/tgpt"
    else
        sudo mv "$tmp_file" "$install_dir/tgpt" || {
            echo -e "${RED}üö´ Failed to move tgpt to $install_dir${NC}"
            rm -f "$tmp_file"
            exit 1
        }
        sudo chmod +x "$install_dir/tgpt"
    fi

    echo -e "${GREEN}‚úÖ tgpt installed at: $install_dir/tgpt${NC}"
}

# === [ Main ] ===
read -r os_name arch <<< "$(detect_os_and_arch)"

echo -e "${BLUE}üì¶ tgpt Installer${NC}"
echo -e "${BLUE}üñ•Ô∏è  OS: $os_name${NC}"
echo -e "${BLUE}‚öôÔ∏è  Architecture: $arch${NC}"
echo -e "${BLUE}üìÅ Installation Path: $install_dir${NC}"
echo

read -p "‚û°Ô∏è  Proceed with installation? (y/n): " confirm
if [[ "${confirm,,}" != "y" ]]; then
    echo -e "${RED}‚ùå Installation cancelled by user.${NC}"
    exit 0
fi

install_tgpt "$os_name" "$arch" "$install_dir"

# Ask for cert.pem upgrade
if $is_termux; then
    read -p "üîê Do you want to upgrade your cert.pem (recommended for network fixes)? (y/n): " cert_confirm
    if [[ "${cert_confirm,,}" == "y" ]]; then
        cert_url="https://curl.se/ca/cacert.pem"
        cert_path="${PREFIX}/etc/tls/cert.pem"
        tmp_cert="${cert_path}.tmp"

        echo -e "${BLUE}üåê Downloading latest CA bundle...${NC}"
        curl -fSL --progress-bar "$cert_url" -o "$tmp_cert" || {
            echo -e "${RED}‚ùå Failed to download new cert.pem${NC}"
            rm -f "$tmp_cert"
        }

        if [ -f "$tmp_cert" ]; then
            mv "$tmp_cert" "$cert_path" && \
            echo -e "${GREEN}üîê cert.pem upgraded successfully.${NC}" || \
            echo -e "${RED}üö´ Failed to move new cert.pem ‚Äî root might be needed.${NC}"
        fi
    fi
fi

# PATH warning
if ! command -v tgpt &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  'tgpt' is not in your PATH.${NC}"
    echo -e "${YELLOW}üëâ Add this to your shell config:${NC}"
    echo -e "${YELLOW}    export PATH=\"${install_dir}:\$PATH\"${NC}"
fi

echo -e "${GREEN}üéâ Installation complete. Run 'tgpt -h' for help.${NC}"
